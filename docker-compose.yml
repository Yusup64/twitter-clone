version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: twitter
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: twitter
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U twitter"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      target: backend
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://twitter:123456@postgres:5432/twitter?schema=public
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_ACCESS_SECRET=your_access_secret
      - JWT_REFRESH_SECRET=your_refresh_secret
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - SERVER_PORT=8080
    restart: unless-stopped
    volumes:
      - ./.env:/app/.env

  frontend:
    build:
      context: .
      target: frontend
    ports:
      - "9000:9000"
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
      - API_URL=http://localhost:8080
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:8080
      - NEXT_PUBLIC_WS_URL=ws://localhost:8080
    restart: unless-stopped
    volumes:
      - ./.env:/app/.env

volumes:
  postgres-data:
  redis-data:
